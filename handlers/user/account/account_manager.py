import asyncio
import datetime
import re
import traceback

import aiohttp
from aiogram import Router, Bot
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import CallbackQuery, InlineKeyboardButton, WebAppInfo, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from api.geocode import Nominatim
from api.mts import MtsAPI
from api.urent import UrentAPI
from api.zeon import Zeon
from db.repository import account_repository
from db.repository import cards_repository
from db.repository import rides_repository
from handlers.user.keyboard_manager import personal_area
from loader import StateWaitMessage

account_router = Router(name='account_router')


@account_router.callback_query(Text(startswith=['get_account', 'update_acc']), any_state)
async def send_account_menu(call: CallbackQuery):
    coupon_match = re.search("coupon=([a-zA-Z0-9]{16})", call.data)
    if not coupon_match:
        await call.message.answer(f'<b>Error in parse callback_data={call.data}</b>')
        return await personal_area(call)
    coupon = coupon_match.group(1)
    account_data = await account_repository.get_account_by_coupon(coupon=coupon)
    if account_data is None:
        await call.message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–ª—é—á–∞ <code>{coupon}</code> –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>")
        return await personal_area(call)
    phone_number = account_data.number
    registration_date = account_data.creation_date.strftime('%Y-%m-%d %H:%M:%S')
    async with aiohttp.ClientSession() as session:
        refresh_token = account_data.refresh_token
        access_token = account_data.access_token
        urent_api = UrentAPI(refresh_token=refresh_token, phone_number=phone_number, session=session,
                             access_token=access_token)
        get_profile_json: dict | bool = await urent_api.get_profile()

        if type(get_profile_json) is bool:
            await personal_area(call)
            return await call.message.answer(text=f'<b>Error: refresh token is expired.\n'
                                                  f'Phone number: <code>{phone_number}</code>.\n'
                                                  f'Coupon: <code>{account_data.coupon}</code></b>')

        points = get_profile_json['bonuses']['value']
        credit_card = bool(len(get_profile_json['cards']))
        credit_card_number = get_profile_json['cards'][0]['cardNumber'] if credit_card else '–ù–µ—Ç'

        try:
            last_purchase_amount = get_profile_json['lastPurchase']['amount']['valueFormatted']

        except TypeError:
            last_purchase_amount = None

        try:
            last_purchase_datetime = datetime.datetime.strptime(get_profile_json['lastPurchase']['dateTimeUtc'],
                                                                "%Y-%m-%dT%H:%M:%SZ").strftime("%Y-%m-%d %H:%M:%S")
        except ValueError:
            last_purchase_datetime = datetime.datetime.strptime(get_profile_json['lastPurchase']['dateTimeUtc'],
                                                                "%Y-%m-%dT%H:%M:%S.%f%z").strftime(
                "%Y-%m-%d %H:%M:%S")

        except TypeError:
            last_purchase_datetime = None

        active_travel_check_json: dict = await urent_api.get_active_travel()
        activities = bool(len(active_travel_check_json.get('activities')))
        ordering = True if activities and (
                active_travel_check_json["activities"][0]["status"] in ["Ordering", "Ordered"]) else False

        account_menu = InlineKeyboardBuilder()
        if credit_card and not activities:
            account_menu.row(InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É',
                                                  callback_data=f"start_drive&coupon={coupon}"))
        if not activities:
            account_menu.row(
                InlineKeyboardButton(text='–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É', callback_data=f"add_credit_card&coupon={coupon}")
                if not credit_card else InlineKeyboardButton(text='–û—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É',
                                                             callback_data=f"remove_cards&coupon={coupon}"))
        else:
            account_menu.row(InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É',
                                                  callback_data=f"stop_drive&coupon={coupon}"))
            account_menu.row(
                InlineKeyboardButton(text='–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É', callback_data=f"pause_drive&coupon={coupon}")
                if ordering else InlineKeyboardButton(text='–°–Ω—è—Ç—å —Å –ø–∞—É–∑—ã',
                                                      callback_data=f"remove_pause_drive&coupon={coupon}"))
            account_menu.row(
                InlineKeyboardButton(text='üí≤ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏', callback_data=f"get_cost&coupon={coupon}"))

        response_data: dict = await urent_api.get_plus_info()
        is_active_plus = bool(len(response_data["entries"]))
        if not is_active_plus:
            account_menu.row(InlineKeyboardButton(text='üß∑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç',
                                                  callback_data=f"activate_mts_premium&coupon={coupon}"))
        if credit_card:
            account_menu.row(InlineKeyboardButton(text='üß∑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
                                                  callback_data=f"activate_promo_code&coupon={coupon}"))

        account_menu.row(InlineKeyboardButton(text='‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è',
                                              callback_data=f"update_acc&coupon={coupon}"))
        account_menu.row(InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
                                              callback_data=f'remove_acc&coupon={coupon}'))
        account_menu.row(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
                                              callback_data=f"accounts_list|send_initial_menu"))
        account_menu_text = f'<b>üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{phone_number[:-4]}****</code>\n' \
                            f'üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: <code>{coupon}</code>\n' \
                            f'üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: <i>{points}</i>\n' \
                            f'üí≥ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: <i>{credit_card_number}</i>\n' \
                            f'üìù –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <i>{last_purchase_amount} | {last_purchase_datetime}</i>\n' \
                            f'üìÖ  –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: <i>{registration_date}</i></b>'
        try:
            await call.message.edit_text(text=account_menu_text, reply_markup=account_menu.as_markup())
        except Exception:
            pass
        finally:
            if call.data.startswith('update_acc'):
                await call.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', show_alert=True)


@account_router.callback_query(Text("off_auto_stop"))
async def off_auto_stop(call: CallbackQuery, bot: Bot):
    try:
        await call.answer("–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", show_alert=True)
        RATE_KEYBOARD = InlineKeyboardBuilder()
        RATE_KEYBOARD.add(InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data="on_auto_stop"))
        for num, kb in enumerate(call.message.reply_markup.inline_keyboard[1:~0]):
            RATE_KEYBOARD.add(InlineKeyboardButton(text=call.message.reply_markup.inline_keyboard[num + 1][0]["text"],
                                                   callback_data=call.message.reply_markup.inline_keyboard[num + 1][0][
                                                       "callback_data"].replace("rideA", "rideH")))
        RATE_KEYBOARD.add(InlineKeyboardButton(text=call.message.reply_markup.inline_keyboard[~0][0]["text"],
                                               callback_data=call.message.reply_markup.inline_keyboard[~0][0][
                                                   "callback_data"]))
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            reply_markup=RATE_KEYBOARD.as_markup())
    except Exception:
        print(traceback.format_exc())


@account_router.callback_query(Text("on_auto_stop"))
async def on_auto_stop(call: CallbackQuery, bot: Bot):
    try:
        await call.answer("–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", show_alert=True)
        RATE_KEYBOARD = InlineKeyboardBuilder()
        RATE_KEYBOARD.add(InlineKeyboardButton(text="‚õî –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data="off_auto_stop"))
        for num, kb in enumerate(call.message.reply_markup.inline_keyboard[1:~0]):
            RATE_KEYBOARD.add(InlineKeyboardButton(text=call.message.reply_markup.inline_keyboard[num + 1][0]["text"],
                                                   callback_data=call.message.reply_markup.inline_keyboard[num + 1][0][
                                                       "callback_data"].replace("rideH", "rideA")))
        RATE_KEYBOARD.add(InlineKeyboardButton(text=call.message.reply_markup.inline_keyboard[~0][0]["text"],
                                               callback_data=call.message.reply_markup.inline_keyboard[~0][0][
                                                   "callback_data"]))
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            reply_markup=RATE_KEYBOARD.as_markup())
    except Exception:
        print(traceback.format_exc())


@account_router.callback_query(Text(startswith=[
    "get_cost",
    "check_payment",
    "start_drive",
    "stop_drive",
    'pause_drive',
    'remove_pause_drive',
    'add_credit_card',
    'remove_cards',
    'get_drive_cost',
    'remove_acc',
    'ride',
    'accept_remove_acc',
    'activate_promo_code',
    'activate_mts_premium',
    "choice_sys"]), any_state)
async def reading_handlers_in_an_account(call: CallbackQuery, state: FSMContext, bot: Bot):
    coupon_match = re.search("coupon=([a-zA-Z0-9]{16})", call.data)
    if not coupon_match:
        await call.message.answer(f'<b>Error in parse callback_data={call.data}</b>')
        return await personal_area(call)
    coupon = coupon_match.group(1)
    payment_method: str = re.search(r'&payment=(\w+.*?)', call.data).group(1) if re.search(r'&payment=(\w+.*?)',
                                                                                           call.data) else ''
    data = await state.get_data()
    account_data = await account_repository.get_account_by_coupon(coupon=coupon)

    if account_data is None:
        await call.message.answer(
            f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–ª—é—á–∞ <code>{coupon}</code> –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>")
        return await personal_area(call)

    phone_number = account_data.number
    refresh_token = account_data.refresh_token
    access_token = account_data.access_token
    kb_back_to_acc = InlineKeyboardBuilder()
    kb_back_to_acc.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"get_account&coupon={coupon}"))
    async with aiohttp.ClientSession() as session:
        urent_api = UrentAPI(session=session, refresh_token=refresh_token, phone_number=phone_number,
                             access_token=access_token)
        profile_data: dict | bool = await urent_api.get_profile()

        if type(profile_data) is bool:
            await personal_area(call)
            return await call.message.answer(text=f'<b>Error: refresh token is expired.\n'
                                                  f'Phone number: <code>{phone_number}</code>.\n'
                                                  f'Coupon: <code>{account_data.coupon}</code></b>')
        points = profile_data['bonuses']['value']
        credit_card_json: dict = await urent_api.check_card_availability()
        entries = bool(len(credit_card_json['entries']))
        active_travel_check_json: dict = await urent_api.get_active_travel()
        activities = bool(len(active_travel_check_json['activities']))

        if call.data.startswith("accept_remove_acc"):
            await account_repository.update_account_status(account_data.id, True)
            await call.answer('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!', show_alert=True)
            logger.log("DELETE-ACCOUNT", f'{call.from_user.id} | {phone_number}')
            await call.message.delete()
            await personal_area(call)

        elif call.data.startswith('remove_acc'):
            if activities:
                await call.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É', show_alert=True)
            elif entries:
                await call.answer('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∂–∏—Ç–µ –∫–∞—Ä—Ç—É', show_alert=True)
            else:
                kb_delete_to_acc = InlineKeyboardBuilder()
                kb_delete_to_acc.add(InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                                                          callback_data=f'accept_remove_acc&coupon={coupon}'))
                kb_delete_to_acc.add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                                                          callback_data=f'get_account&coupon={coupon}'))
                await call.message.edit_text(text='<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</b>',
                                             reply_markup=kb_delete_to_acc.as_markup())

        elif call.data.startswith('get_cost'):
            if activities:
                try:
                    scooter_id = active_travel_check_json['activities'][0]['bikeIdentifier']
                    value = active_travel_check_json['activities'][0]['bonusWithdrawnMoney']['valueFormatted']
                    charge = int(float(active_travel_check_json['activities'][0]['charge']['batteryPercent']) * 100)
                    logger.log("GET-COST-UR-RIDE", f'{call.from_user.id} | {phone_number}')
                    await call.answer(f'üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∞: {account_data.points}\n'
                                      f'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏, —Å —É—á–µ—Ç–æ–º —Å—É–º–º—ã –∑–∞ —Å—Ç–∞—Ä—Ç: {value}\n'
                                      f'üõ¥ –ù–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞: {scooter_id}\n'
                                      f'üîã –ó–∞—Ä—è–¥ —Å–∞–º–æ–∫–∞—Ç–∞: {charge}%', show_alert=True)
                except Exception:
                    print(traceback.format_exc())
            else:
                await send_account_menu(call)

        elif call.data.startswith("remove_cards"):
            if not entries:
                await call.answer('–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–∞—Ä—Ç–∞', show_alert=True)
            elif not activities:
                credit_cards_list: list[dict] = credit_card_json["entries"]
                cards_id = [data_card['id'] for data_card in credit_cards_list]
                await asyncio.gather(*(urent_api.remove_card(card_id=card_id) for card_id in cards_id))
                await call.answer(text='–í—Å–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', show_alert=True)
                logger.log("UNLINK-CARDS", f'{call.from_user.id} | {phone_number}')
            await send_account_menu(call)

        elif call.data.startswith("start_drive"):
            if not entries:
                await call.answer('–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–∞—Ä—Ç–∞', show_alert=True)
            elif not activities:
                await state.update_data(phone_number=phone_number, cancel_message_id=call.message.message_id)
                kb_back_to_acc = InlineKeyboardBuilder()
                kb_back_to_acc.add(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è',
                                                        callback_data=f"get_account&coupon={coupon}"))
                await call.message.edit_text(
                    '<b>–ü—Ä–∏—à–ª–∏—Ç–µ QR –∫–æ–¥ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.\n'
                    '<i>–ü—Ä–∏–º–µ—Ä: 192-156 –∏–ª–∏ –∂–µ 192156</i></b>',
                    reply_markup=kb_back_to_acc.as_markup())
                await state.set_state(StateWaitMessage.input_scooter)
            else:
                await send_account_menu(call)

        elif call.data.startswith('ride'):
            if not activities:
                try:
                    id_tariff: str = re.search(r'&id=(\w+.*?)', call.data).group(1) if re.search(r'&id=(\w+.*?)',
                                                                                                 call.data) else ''
                    lat: str = data['lat']
                    lng: str = data['lng']
                    scooter_id: str = data['scooter_id']
                    tariff_prices: dict = data['tariff_prices']
                    display_name: str = tariff_prices[id_tariff]['display_name']
                    cost: int = tariff_prices[id_tariff]['cost']
                    activation_cost: int | str = tariff_prices[id_tariff]['activation_cost']
                    response_json: dict | bool = await urent_api.start_drive(lat=lat, lng=lng, id_tariff=id_tariff,
                                                                             scooter_id=scooter_id)
                    if response_json['errors']:
                        return await call.answer(response_json['errors'][0]['value'][0], show_alert=True)

                    if call.data.startswith('rideA') and display_name.startswith(
                            '–ü–æ–º–∏–Ω—É—Ç–Ω—ã–π'):  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        await call.message.answer('<b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏.\n'
                                                  '–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –º–æ–∂–µ—Ç <u>–Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å!</u></b>')
                        await rides_repository.add_ride(account_data.id, call.from_user.id,
                                                        {'cost': cost, 'activation_cost': activation_cost},
                                                        (await bot.get_me()).id)
                        logger.log("START-UR-RIDE", f'{call.from_user.id} | {phone_number}')
                        await call.answer('–°–∞–º–æ–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n'
                                          '–£–¥–∞—á–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏ –∏ –±—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–µ!', show_alert=True)

                    elif call.data.startswith('rideH') or not display_name.startswith(
                            '–ü–æ–º–∏–Ω—É—Ç–Ω—ã–π'):  # –†—É—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        await call.message.answer('<b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏.\n'
                                                  '<u>–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ</u></b>')

                    await account_repository.update_account_points(account_data.id, points)

                except KeyError:
                    await call.answer('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ', show_alert=True)

            await send_account_menu(call)

        elif call.data.startswith('stop_drive'):
            if activities:
                scooter_id = active_travel_check_json['activities'][0]['bikeIdentifier']
                response_json: dict = await urent_api.stop_drive(scooter_id=scooter_id)
                if response_json['errors']:
                    error = response_json['errors'][0]['value'][0]
                    await call.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∞–º–æ–∫–∞—Ç–∞: {error}', show_alert=True)
                else:
                    logger.log("END-UR-RIDE", f'{call.from_user.id} | {phone_number}')
                    await rides_repository.update_status_ride_by_kwargs(finished_at=datetime.datetime.now(),
                                                                        user_id=call.from_user.id,
                                                                        account_id=account_data.id)
                    await call.answer('–ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', show_alert=True)
            await send_account_menu(call)

        elif call.data.startswith("remove_pause_drive"):
            if activities:
                scooter_id = active_travel_check_json['activities'][0]['bikeIdentifier']
                lat = active_travel_check_json['activities'][0]['location']['lat']
                lng = active_travel_check_json['activities'][0]['location']['lng']
                response_json: dict = await urent_api.remove_pause_drive(scooter_id=scooter_id, lat=lat, lng=lng)
                if response_json['errors']:
                    error = response_json['errors'][0]['value'][0]
                    await call.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å–∞–º–æ–∫–∞—Ç–∞ —Å –ø–∞—É–∑—ã: {error}', show_alert=True)
                else:
                    logger.log("RESUME-UR-RIDE", f'{call.from_user.id} | {phone_number}')
                    await call.answer(f'–°–∞–º–æ–∫–∞—Ç —Å–Ω—è—Ç —Å –ø–∞—É–∑—ã', show_alert=True)
            await send_account_menu(call)

        elif call.data.startswith("pause_drive"):
            if activities:
                scooter_id = active_travel_check_json['activities'][0]['bikeIdentifier']
                lat = active_travel_check_json['activities'][0]['location']['lat']
                lng = active_travel_check_json['activities'][0]['location']['lng']
                response_json: dict | bool = await urent_api.pause_drive(scooter_id=scooter_id, lat=lat, lng=lng)
                if type(profile_data) is bool:
                    await personal_area(call)
                    return await call.message.answer(text=f'<b>Error: refresh token is expired.\n'
                                                          f'Phone number: <code>{phone_number}</code>.\n'
                                                          f'Coupon: <code>{account_data.coupon}</code></b>')
                if response_json['errors']:
                    error = response_json['errors'][0]['value'][0]
                    return await call.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∞–º–æ–∫–∞—Ç–∞ –Ω–∞ –ø–∞—É–∑—É: {error}', show_alert=True)

                logger.log("PAUSE-UR-RIDE", f'{call.from_user.id} | {phone_number}')
                await call.answer('–°–∞–º–æ–∫–∞—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É', show_alert=True)
            await send_account_menu(call)

        elif call.data.startswith("add_credit_card"):
            if entries:
                await call.answer('–û—Ç–≤—è–∂–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é', show_alert=True)
                return await send_account_menu(call)

            await call.message.edit_text(
                "<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n"
                "<code>2200700423151016:08/30:123</code>\n"
                "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ –í—ã –≤–æ–ª–Ω—É–µ—Ç–µ—Å—å –∑–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π, –≤—ã–ø—É—Å–∫–∞–π—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç <i>–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫–∞</i>, –≥–¥–µ –¥–æ–ª–∂–Ω–æ –ª–µ–∂–∞—Ç—å <u>–Ω–µ –º–µ–Ω–µ–µ</u> 15 —Ä—É–±–ª–µ–π + —Å—É–º–º–∞ –∑–∞ –∑–∞–ª–æ–≥, –æ–±—ã—á–Ω–æ –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 300 —Ä—É–±–ª–µ–π</b>",
                reply_markup=kb_back_to_acc.as_markup())
            await state.update_data(cancel_message_id=call.message.message_id, coupon=coupon)
            await state.set_state(StateWaitMessage.input_card)

        elif call.data.startswith('choice_sys'):
            card_number = data['card_number']
            date = data['date']
            csc = data['csc']
            await call.message.edit_text(text='<b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã –Ω–∞—á–∞—Ç–∞...</b>')
            if payment_method == 'yoo':
                try:
                    response = await urent_api.binding_credit_card(card_number=card_number,
                                                                   expiry_month=date.split('/')[0],
                                                                   expiry_year='20' + date.split('/')[1],
                                                                   csc=csc, bot=bot, payment_method=payment_method,
                                                                   state=state)
                except Exception as e:
                    kb_back_to_acc = InlineKeyboardBuilder()
                    kb_back_to_acc.row(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                            callback_data=f'get_account&coupon={coupon}'))
                    return await call.message.edit_text(text=f'<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <i>{e}</i></b>',
                                                        reply_markup=kb_back_to_acc.as_markup())
                await call.message.edit_text(
                    text="<b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ–ø–ª–∞—Ç—ã, –µ—â–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...</b>")
                await asyncio.sleep(5)
                credit_card_json: dict = await urent_api.check_card_availability()
                entries = bool(len(credit_card_json.get('entries')))

                if response['error']:
                    kb_back_to_acc = InlineKeyboardBuilder()
                    kb_back_to_acc.row(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                            callback_data=f'get_account&coupon={coupon}'))
                    await call.message.edit_text(text=f'<b>{response["error"]}</b>',
                                                 reply_markup=kb_back_to_acc.as_markup())
                    logger.log("LINK-CARD-DENY", f'{call.from_user.id} | {phone_number}')

                elif response['confirmation_url']:
                    kb_back_to_acc = InlineKeyboardBuilder()
                    webApp = WebAppInfo(url=response['confirmation_url'])
                    kb_back_to_acc.row(InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∏–≤—è–∑–∫–µ', web_app=webApp))
                    kb_back_to_acc.row(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É',
                                                            callback_data=f'check_payment&coupon={coupon}&payment={payment_method}'))
                    kb_back_to_acc.row(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                            callback_data=f'get_account&coupon={coupon}'))
                    await call.message.edit_text(text='<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã</b>',
                                                 reply_markup=kb_back_to_acc.as_markup())

                elif entries:
                    card_check = await cards_repository.get_card_by_number(card_number)
                    if not card_check:
                        await cards_repository.add_card(number=card_number, date=date, cvc=csc,
                                                        user_id=call.from_user.id)
                    await call.message.edit_text(text='<b>–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!</b>')
                    await send_account_menu(call)
                    logger.log("LINK-CARD", f'{call.from_user.id} | {phone_number}')

                else:
                    kb_back_to_acc = InlineKeyboardBuilder()
                    kb_back_to_acc.add(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                            callback_data=f'get_account&coupon={coupon}'))
                    await call.message.edit_text(
                        text='<b>–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã.\n'
                             '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–µ—Å—è—Ü / –≥–æ–¥ / cvv).</b>',
                        reply_markup=kb_back_to_acc.as_markup())
                    logger.log("LINK-CARD-DENY", f'{call.from_user.id} | {phone_number}')

            elif payment_method == "cloud":
                payment_acquiring_setting_data = await urent_api.payment_acquiring_setting()
                cloud_payments_public_id = payment_acquiring_setting_data['settings']['publicId']
                cloud_crypto_data = await urent_api.ash_magnzona_urent_cloud_crypto(card_number=card_number,
                                                                                    card_cvc=csc,
                                                                                    card_date=date,
                                                                                    cloud_payments_public_id=cloud_payments_public_id)
                cryptogram = cloud_crypto_data['result_hash']
                cloudpayments_card_data = await urent_api.cloudpayments_card(cryptogram=cryptogram)
                pa_req = cloudpayments_card_data['paReq']
                acs_url = cloudpayments_card_data['acsUrl']
                md = cloudpayments_card_data['md']
                await urent_api.acs_url(acs_url=acs_url, md=md, pa_req=pa_req)
                zeon_api = Zeon(port=223, session=session)
                payment_create_data = await zeon_api.payment_create(acs_url=acs_url,
                                                                    pa_req=pa_req,
                                                                    md=md,
                                                                    bot_username=(await bot.get_me()).username)
                zeon_url: str = payment_create_data['url']
                url_id = zeon_url.split('=')[-1]
                kb_back_to_acc = InlineKeyboardBuilder()
                webApp = WebAppInfo(url=zeon_url)
                kb_back_to_acc.row(InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∏–≤—è–∑–∫–µ', web_app=webApp))
                kb_back_to_acc.row(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É',
                                                        callback_data=f'check_payment&coupon={coupon}&payment={payment_method}'))
                kb_back_to_acc.row(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                        callback_data=f'get_account&coupon={coupon}'))
                await state.update_data(url_id=url_id)
                await call.message.edit_text(text='<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã</b>',
                                             reply_markup=kb_back_to_acc.as_markup())

        elif call.data.startswith('check_payment'):
            await call.message.edit_text("<b>–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ <i>(–∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 20 —Å–µ–∫—É–Ω–¥)...</i></b>")
            if payment_method == 'yoo':
                await asyncio.sleep(10)
                credit_card_json: dict = await urent_api.check_card_availability()
                entries = bool(len(credit_card_json['entries']))
                if not entries:
                    await call.answer(text='–ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', show_alert=True)
                    logger.log("LINK-CARD-DENY", f'{call.from_user.id} | {phone_number}')
                    try:
                        card_number = data['card_number']
                        date = data['date']
                        csc = data['csc']
                    except KeyError:
                        await call.message.edit_text(
                            text='–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.', )
                        return await send_account_menu(call)
                    await call.message.edit_text(text='<b>–°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã...</b>')
                    try:
                        response = await urent_api.binding_credit_card(card_number=card_number,
                                                                       expiry_month=date.split('/')[0],
                                                                       expiry_year='20' + date.split('/')[1],
                                                                       csc=csc, bot=bot,
                                                                       payment_method=payment_method, state=state)
                    except Exception as e:
                        kb_back_to_acc = InlineKeyboardBuilder()
                        kb_back_to_acc.row(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                                callback_data=f'get_account&coupon={coupon}'))

                        return await call.message.edit_text(f'<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}</b>',
                                                            reply_markup=kb_back_to_acc.as_markup())

                    if response['error']:
                        kb_back_to_acc = InlineKeyboardBuilder()
                        kb_back_to_acc.row(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                                callback_data=f'get_account&coupon={coupon}'))
                        await call.message.edit_text(f'<b>{response["error"]}</b>',
                                                     reply_markup=kb_back_to_acc.as_markup())
                    elif response['confirmation_url']:
                        kb_back_to_acc = InlineKeyboardBuilder()
                        webApp = WebAppInfo(url=response['confirmation_url'])
                        kb_back_to_acc.row(InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∏–≤—è–∑–∫–µ', web_app=webApp))
                        kb_back_to_acc.row(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É',
                                                                callback_data=f'check_payment&coupon={coupon}&payment={payment_method}'))
                        kb_back_to_acc.row(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                                callback_data=f'get_account&coupon={coupon}'))
                        await call.message.edit_text('<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã:</b>',
                                                     reply_markup=kb_back_to_acc.as_markup())
                    else:
                        logger.log("LINK-CARD", f'{call.from_user.id} | {phone_number}')
                        await call.message.edit_text(text='<b>–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!</b>')
                        card = await cards_repository.get_card_by_number(number=card_number)
                        if not card:
                            await cards_repository.add_card(number=card_number, date=date, cvc=csc,
                                                            user_id=call.from_user.id)
                        await send_account_menu(call)

                else:
                    try:
                        card_number = data['card_number']
                        date = data['date']
                        csc = data['csc']
                        card_check = await cards_repository.get_card_by_number(card_number)
                        if not card_check:
                            await cards_repository.add_card(number=card_number, date=date, cvc=csc,
                                                            user_id=call.from_user.id)
                    finally:
                        logger.log("LINK-CARD", f'{call.from_user.id} | {phone_number}')
                        await call.message.edit_text(text='<b>–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!</b>')
                        await send_account_menu(call)

            elif payment_method == 'cloud':
                url_id = data['url_id']
                zeon_api = Zeon(port=223, session=session)
                payment_check_data = await zeon_api.payment_check(url_id=url_id)
                pa_res = payment_check_data['content']['pa_res']
                md = payment_check_data['content']['md']
                cloudpayments_post3ds_data = await urent_api.cloudpayments_post3ds(pa_res=pa_res, md=md)
                errors: list = cloudpayments_post3ds_data['errors']
                if bool(len(errors)):
                    kb_back_to_acc = InlineKeyboardBuilder()
                    kb_back_to_acc.row(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                            callback_data=f'get_account&coupon={coupon}'))
                    return await call.message.edit_text(
                        f'<b>–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–≤—è–∑–∫–∏: <i>{errors[0]["value"][0]}</i></b>',
                        reply_markup=kb_back_to_acc.as_markup())
                await call.message.edit_text('<b>–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!</b>')
                await send_account_menu(call)

        elif call.data.startswith('activate_mts_premium'):
            mts_api = MtsAPI(phone_number=phone_number, session=session)
            is_premium = await mts_api.get_mts_premium()
            if is_premium:
                await call.answer('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', show_alert=True)
            else:
                await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç(", show_alert=True)
            await send_account_menu(call)

        elif call.data.startswith('activate_promo_code'):
            kb_back_to_acc = InlineKeyboardBuilder()
            kb_back_to_acc.add(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                                    callback_data=f'get_account&coupon={coupon}'))
            await call.message.edit_text(text="<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:</b>", reply_markup=kb_back_to_acc.as_markup())
            await state.update_data(cancel_message_id=call.message.message_id, coupon=coupon)
            await state.set_state(StateWaitMessage.input_promo_code)


@account_router.message(StateWaitMessage.input_promo_code)
async def input_promo_code(message: Message, state: FSMContext, bot: Bot):
    await message.delete()
    data = await state.get_data()
    coupon = data['coupon']
    cancel_message_id = data['cancel_message_id']
    await state.clear()
    promo_code = message.text
    tg_user_id = message.from_user.id
    await bot.edit_message_reply_markup(chat_id=tg_user_id, message_id=cancel_message_id)
    account_data = await account_repository.get_account_by_coupon(coupon=coupon)
    refresh_token = account_data.refresh_token
    access_token = account_data.access_token
    phone_number = account_data.number
    async with aiohttp.ClientSession() as session:
        urent_api = UrentAPI(session=session, refresh_token=refresh_token, access_token=access_token,
                             phone_number=phone_number)
        response_data: dict | bool = await urent_api.activate_promo_code(promo_code=promo_code)
        if type(response_data) is bool:
            await personal_area(message)
            return await message.answer(text=f'<b>Error: refresh token is expired.\n'
                                             f'Phone number: <code>{phone_number}</code>.\n'
                                             f'Coupon: <code>{coupon}</code></b>')
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                          callback_data=f'get_account&coupon={coupon}'))
        if response_data['errors']:
            await bot.edit_message_text(chat_id=tg_user_id, message_id=cancel_message_id,
                                        text=f'<b>–û—à–∏–±–∫–∞: {response_data["errors"][0]["value"][0]}</b>',
                                        reply_markup=keyboard.as_markup())
        else:
            await bot.edit_message_text(chat_id=tg_user_id, message_id=cancel_message_id,
                                        text=f'<b>–ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω!</b>',
                                        reply_markup=keyboard.as_markup())


@account_router.message(StateWaitMessage.input_card)
async def input_card(message: Message, state: FSMContext, bot: Bot):
    tg_user_id = message.from_user.id
    data = await state.get_data()
    cancel_message_id = data['cancel_message_id']
    coupon = data['coupon']
    formatted_card = ''.join(char for char in message.text if char.isdigit() or char == ':' or char == "/")
    await state.clear()
    if re.match(r'^\d{16}:\d{2}\/\d{2}:\d{3}$', formatted_card):
        await message.delete()
        card_number, date, csc = formatted_card.split(':')
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text='CloudPayments',
                                          callback_data=f'choice_sys&coupon={coupon}&payment=cloud'))
        keyboard.row(InlineKeyboardButton(text='YooMoney',
                                          callback_data=f'choice_sys&coupon={coupon}&payment=yoo'))
        await bot.edit_message_text(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã:\n'
                                         '<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –ø–æ 1 –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞ –∏ –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, '
                                         '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã.</i></b>',
                                    chat_id=tg_user_id, message_id=cancel_message_id, reply_markup=keyboard.as_markup())
        return await state.update_data(cancel_message_id=cancel_message_id, card_number=card_number, date=date, csc=csc)

    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                          callback_data=f'get_account&coupon={coupon}'))
        await message.reply('<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É, —á—Ç–æ –¥–∞–Ω –≤—ã—à–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...</b>',
                            reply_markup=keyboard.as_markup())


@account_router.message(StateWaitMessage.input_scooter)
async def start_drive(message: Message, state: FSMContext, bot: Bot):
    await message.delete()
    scooter_id = ''.join([char for char in message.text.split('-') if char.isdigit()])
    tg_user_id = message.from_user.id
    data = await state.get_data()
    coupon = data['coupon']
    cancel_message_id = data['cancel_message_id']
    await state.clear()
    if scooter_id == '':
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç",
                                          callback_data=f"get_account&coupon={coupon}"))
        return await bot.edit_message_text(chat_id=tg_user_id, message_id=cancel_message_id,
                                           text=f"<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞</b>",
                                           reply_markup=keyboard.as_markup())
    account_data = await account_repository.get_account_by_coupon(coupon=coupon)
    refresh_token = account_data.refresh_token
    access_token = account_data.access_token
    phone_number = account_data.number
    async with aiohttp.ClientSession() as session:
        urent_api = UrentAPI(refresh_token=refresh_token, phone_number=phone_number, access_token=access_token,
                             session=session)
        is_active_plus = await urent_api.get_plus_info()
        scooter_info = await urent_api.get_scooter_info(scooter_id=scooter_id)
        if scooter_info["succeeded"]:
            if is_active_plus:
                del scooter_info["rate"]["entries"][0]["activationCost"]
            RATE_KEYBOARD = InlineKeyboardBuilder()
            RATE_KEYBOARD.row(InlineKeyboardButton(text="‚õî –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data="off_auto_stop"))

            ############
            name_of_scooter: str = scooter_info.get('modelName')
            charge = f"{int(scooter_info['charge']['batteryPercent'] * 100)}%"
            verify_cost = scooter_info['rate']['entries'][0]['verifyCost']['valueFormatted']
            battery_for_active_in_hours = str(int(scooter_info['charge']['batteryForActiveInHours'] * 60)) + ' –º–∏–Ω.'
            lat: int = scooter_info['location']['lat']
            lng: int = scooter_info['location']['lng']
            tariff_prices = dict()
            ############

            nominatim = Nominatim(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36')
            city = await nominatim.get_address(lng=lng, lat=lat)

            for entry in scooter_info['rate']['entries']:
                display_name: str = entry['displayName']
                activation_cost: int | str = entry['activationCost']['value'] if entry.get(
                    'activationCost') is not None else ""
                cost: str = entry['debit']['valueFormatted'] if activation_cost == '' else ' + ' + entry['debit'][
                    'valueFormatted']
                id_tariff: str = entry['id']
                tariff_prices[id_tariff] = {'cost': entry['debit']['value'],
                                            'activation_cost': activation_cost,
                                            'display_name': display_name}
                RATE_KEYBOARD.row(InlineKeyboardButton(text=f'{display_name} {activation_cost}{cost}',
                                                       callback_data=f'rideA&id={id_tariff}&coupon={coupon}'))
            scooter_text = f'üõ¥ <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Å–∞–º–æ–∫–∞—Ç:</b> <i>{scooter_id}</i>\n' \
                           f'üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ª–æ–≥–∞:</b> <i>{verify_cost}</i>\n' \
                           f'üîã <b>–ó–∞—Ä—è–¥ —Å–∞–º–æ–∫–∞—Ç–∞:</b> <i>{charge}</i>\n' \
                           f'‚è≥ <b>–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ö–≤–∞—Ç–∏—Ç –∑–∞—Ä—è–¥–∞:</b> <i>{battery_for_active_in_hours} | {round(scooter_info["charge"]["remainKm"], 2)} –∫–º</i>\n' \
                           f'üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–∫–∞—Ç–∞:</b> <i>{name_of_scooter}</i>\n' \
                           f'üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> <i>{city}</i>\n'
            RATE_KEYBOARD.row(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç",
                                                   callback_data=f"get_account&coupon={coupon}"))
            await bot.edit_message_text(chat_id=tg_user_id, message_id=cancel_message_id, text=scooter_text,
                                        reply_markup=RATE_KEYBOARD.as_markup())
            await state.update_data(scooter_id=scooter_id, lat=lat, lng=lng, tariff_prices=tariff_prices)
        else:
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç",
                                              callback_data=f"get_account&coupon={coupon}"))
            await bot.edit_message_text(chat_id=tg_user_id, message_id=cancel_message_id,
                                        text=f"<b>–û—à–∏–±–∫–∞: {scooter_info['errors'][0]['value'][0]}</b>",
                                        reply_markup=keyboard.as_markup())
